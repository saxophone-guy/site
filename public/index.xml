<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jazz</title><link>http://localhost:8000/</link><description>Recent content on jazz</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Thu, 07 Nov 2024 17:01:43 +0530</lastBuildDate><atom:link href="http://localhost:8000/index.xml" rel="self" type="application/rss+xml"/><item><title>Achieving Memory Safety in C</title><link>http://localhost:8000/posts/memory-safety/</link><pubDate>Thu, 07 Nov 2024 17:01:43 +0530</pubDate><guid>http://localhost:8000/posts/memory-safety/</guid><description>&lt;h3 id="an-introduction">An Introduction&lt;/h3>
&lt;p>Let&amp;rsquo;s talk about memory safety in C. If you&amp;rsquo;ve spent any time writing code in C, you&amp;rsquo;ve probably encountered bugs that don’t just crash your program—they can do all sorts of wonderful things, like turning your screen into a modern art display of random characters or, even worse, quietly corrupting your data.&lt;/p>
&lt;p>I&amp;rsquo;m making this article to help some of you that are new to low-level programming understand it using a real-life scenario. I&amp;rsquo;m gonna be trying this out with &lt;a href="https://leetcode.com/problems/generate-parentheses/description/?envType=problem-list-v3&amp;amp;envId=dynamic-programming">LeetCode&amp;rsquo;s &amp;ldquo;Generate Parentheses&amp;rdquo; problem&lt;/a>.&lt;/p></description></item><item><title>Optimizing a square sum sequence</title><link>http://localhost:8000/posts/first-post/</link><pubDate>Wed, 06 Nov 2024 21:55:08 +0530</pubDate><guid>http://localhost:8000/posts/first-post/</guid><description>&lt;h3 id="mathematical-background">Mathematical background&lt;/h3>
&lt;p>Before I start talking about this, let&amp;rsquo;s understand what we&amp;rsquo;re actually computing.&lt;/p>
&lt;p>$\sum_{i=0}^{n-1} i^2 \pmod{1000000007}$&lt;/p>
&lt;p>There are several mathematical properties we can exploit here:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The sum of squares has a closed form:
$\sum_{i=0}^{n-1} i^2 = \frac{(n-1)(n)(2n-1)}{6}$&lt;/p>
&lt;ul>
&lt;li>However, this isn&amp;rsquo;t immediately useful to us because the result would overflow for a large $n$, and we need the modulo at each step.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>The properties of modular arithmetic:&lt;/p>
&lt;ul>
&lt;li>$(a + b) \bmod m = ((a \bmod m) + (b \bmod m)) \bmod m$&lt;/li>
&lt;li>$(a * b) \bmod m = ((a \bmod m) * (b \bmod m)) \bmod m$&lt;/li>
&lt;/ul>
&lt;p>This means we can:&lt;/p></description></item><item><title>About</title><link>http://localhost:8000/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8000/about/</guid><description>&lt;h3 id="who-am-i">Who am I?&lt;/h3>
&lt;p>Hey! I&amp;rsquo;m Archit, also known as &lt;code>saxophone&lt;/code> on the internet. I&amp;rsquo;m a developer who codes for fun and digs deep into computers. Most of my time is spent working with C and C++, although sometimes I use assembly (both x86 and ARM)&lt;/p>
&lt;h3 id="what-i-do">What I do&lt;/h3>
&lt;p>I enjoy optimizing code and making it memory-safe, although I do tinker with a bit of everything. My projects revolve around low-level programming, where I focus on squeezing out performance while keeping things stable and secure. I&amp;rsquo;m fascinated by the internals of operating systems, networking, and compilers, which is why you&amp;rsquo;ll often find me experimenting with assembly and system-level code. Also, I love math.&lt;/p></description></item></channel></rss>